from django import forms
from django.forms.widgets import CheckboxSelectMultiple
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.db.models.fields.related import ForeignKey
from models import Language
from models import Tags


TAG_CHOICES = (
    ('Tag1', 'Tag1'),
    ('Tag2', 'Tag2'),
)

SUB_CHOICES_TYPE = (
    ('Rat', 'Rate'),
    ('Req', 'Request'), 
)



class UserCreateForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ("username", "email", "password1", "password2")

    def save(self, commit=True):
        user = super(UserCreateForm, self).save(commit=False)
        user.email = self.cleaned_data["email"]
        if commit:
            user.save()
        return user
    
    def clean_email(self):
        email = self.cleaned_data.get('email')
        username = self.cleaned_data.get('username')
        if email and User.objects.filter(email=email).exclude(username=username).count():
            raise forms.ValidationError(u'Email addresses must be unique.')
        return email

class ratingForm(forms.Form):
    review = forms.CharField(label=u'Review of the code',widget=forms.Textarea(attrs={'rows': 4, 'class' : 'row-fluid'}))
    rate = forms.DecimalField(label=u'Rating', max_digits=1)
    tags = forms.MultipleChoiceField(label=u'Check the categories you think your review best fits in', required=False, widget=CheckboxSelectMultiple(), choices=[])
    code = forms.CharField(label=u'How you would have code it (Optional)', required=False, widget=forms.Textarea(attrs={'rows': 4, 'class' : 'row-fluid'}))
    def __init__(self, *args, **kwargs):
        super(ratingForm, self).__init__(*args, **kwargs)
        self.fields['tags'].choices = Tags.objects.all().values_list("Name","Name")
    


   
class SubmitForm(forms.Form):
    title = forms.CharField()
    description = forms.CharField(widget=forms.Textarea(attrs={'rows': 4, 'class' : 'row-fluid'}))
    language = forms.ChoiceField(choices=[])
    code = forms.CharField(widget=forms.Textarea(attrs={'rows': 4, 'class' : 'row-fluid'}))
    type = forms.ChoiceField(widget=forms.RadioSelect, choices=SUB_CHOICES_TYPE)
    #init definition to populate the language combobox
    def __init__(self, *args, **kwargs):
        super(SubmitForm, self).__init__(*args, **kwargs)
        self.fields['language'].choices = Language.objects.all().values_list("Name","Name")