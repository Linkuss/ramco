from cProfile import label
from django import forms
from django.forms.widgets import CheckboxSelectMultiple
from django.forms.widgets import Textarea
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.db.models.fields.related import ForeignKey
from models import Language
from models import Tags
from models import *
from decimal import *
from ramco.settings import MAX_RATING


TAG_CHOICES = (
    ('Tag1', 'Tag1'),
    ('Tag2', 'Tag2'),
)

SUB_CHOICES_TYPE = (
    ('Rat', 'Rate'),
    ('Req', 'Request'), 
)



class UserCreateForm(UserCreationForm):
    email = forms.EmailField(required=True)

    class Meta:
        model = User
        fields = ("username", "email", "password1", "password2")

    def save(self, commit=True):
        user = super(UserCreateForm, self).save(commit=False)
        user.email = self.cleaned_data["email"]
        if commit:
            user.save()
        return user
    
    def clean_email(self):
        email = self.cleaned_data.get('email')
        username = self.cleaned_data.get('username')
        if email and User.objects.filter(email=email).exclude(username=username).count():
            raise forms.ValidationError(u'Email address already used.')
        return email

class RatingForm(forms.ModelForm):
    
    tagsList = forms.MultipleChoiceField(widget=CheckboxSelectMultiple(), required=False)
    
    class Meta:
        model = Review
        exclude = ('user', 'tagsList')
        fields = ('comment','rating','code')
        widgets = {
            'comment': Textarea(attrs={'rows': 4, 'class': 'row-fluid'}),
            'code':  Textarea(attrs={'rows': 4, 'class': 'row-fluid'}),
            }
    def __init__(self, *args, **kwargs):
        super(RatingForm, self).__init__(*args, **kwargs)
        self.fields['comment'].label = u'Review of the code'
        self.fields['tagsList'].label = u'Check the categories you think your review best fits in'
        self.fields['code'].label = u'How you would have code it (Optional)'
        self.fields['tagsList'].choices = Tags.objects.all().values_list("Name", "Name")
        
    def clean_rating(self):
        rating = self.cleaned_data.get('rating')
        if rating<0 or rating>MAX_RATING:
            raise forms.ValidationError(u'Rating must be positive and smaller than 10')
        return rating



class SubmitForm(forms.Form):
    title = forms.CharField()
    description = forms.CharField(widget=forms.Textarea(attrs={'rows': 4, 'class' : 'row-fluid'}))
    language = forms.ChoiceField(choices=[])
    code = forms.CharField(widget=forms.Textarea(attrs={'rows': 4, 'class' : 'row-fluid'}))
    type = forms.ChoiceField(widget=forms.RadioSelect, choices=SUB_CHOICES_TYPE)
    #init definition tforms.ModelFormo populate the language combobox
    def __init__(self, *args, **kwargs):
        super(SubmitForm, self).__init__(*args, **kwargs)
        self.fields['language'].choices = Language.objects.all().values_list("Name","Name")