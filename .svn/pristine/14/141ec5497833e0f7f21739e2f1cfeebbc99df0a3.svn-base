import random
import datetime

from django.contrib import messages
from django.http import HttpResponseRedirect
from django.contrib import auth
from django.shortcuts import render_to_response
from django.template import RequestContext
from django.contrib.auth.models import User
from django.core.mail import send_mail
from django.contrib.auth.decorators import login_required

from decimal import *
from forms import SubmitForm
from forms import UserCreateForm
from forms import RatingForm
from models import *

from ramco.settings import MAX_RATING


__author__ = 'vince'
__author__ = 'tiago'


def index(request):
    sub_list= Submission.objects.order_by('id').reverse()[0:10]
    noti = 0
    if request.user.is_authenticated():
        noti = request.user.get_profile().nbrNotifs
        #return render_to_response('index.html', {'sub_list': sub_list, 'navhome' : True}, context_instance=RequestContext(request))
    return render_to_response('index.html', {'sub_list': sub_list, 'navhome' : True, 'nbrNot' : noti}, context_instance=RequestContext(request))

@login_required(login_url='/login/')
def submit(request):
    noti = request.user.get_profile().nbrNotifs
    if request.method == 'POST':
        form = SubmitForm(request.POST)
        if not form.is_valid():
            return render_to_response("submitCode.html", {'form': form, 'nbrNot' : noti}, context_instance=RequestContext(request))
        tit = str(form['title'].value())
        desc = str(form['description'].value())
        co = str(form['code'].value())
        langF = form['language'].value()
        lang = Language.objects.get(Name=langF)
        username=request.user.username
        user = User.objects.get(username=username)
        sub = Submission(title=tit, code=co, description=desc, language=lang, user=user)
        sub.save()
        return render_to_response("thankyou.html", {'thing': "submission", 'redirect': "your submission", 's_id': sub.id, 'nbrNot' : noti},context_instance=RequestContext(request))
    else:
        form = SubmitForm(initial={'type' : 'Rat'})
        return render_to_response('submitCode.html', {'form': form, 'nbrNot' : noti}, context_instance=RequestContext(request))

@login_required(login_url='/login/')
def rating(request, s_id):
    noti = request.user.get_profile().nbrNotifs
    if request.method == 'POST':
        form = RatingForm(request.POST)
        if not form.is_valid():
            return render_to_response("rating.html", {'form': form, 'nbrNot' : noti}, context_instance=RequestContext(request))
        else:
            try:
                sub = Submission.objects.select_for_update().get(id=s_id)
               # comment = request.POST.get('line_comment[comment]')
               # line_n = request.POST.get('line_comment[line_n]')

                review = form.save(commit=False)
                review.user = request.user
                review.submission = Submission.objects.get(id=s_id)
                review.rating = form['rate'].value()
                form.save()
                tags = form['tagsList'].value()
                for t in tags:
                    t1 = TaggedReview(content_object=review, tag=t)
                    t1.save()
                review.save()
                sub = Submission.objects.select_for_update().get(id=s_id)
                oldR = sub.meanRating
                oldNbrC = sub.nbrComments
                newR = (oldR*oldNbrC + Decimal(review.rating)) / (oldNbrC+1)
                sub.meanRating = Decimal(newR)
                sub.nbrComments = oldNbrC+1
                if not sub.ownerNotif:
                    sub.ownerNotif = True
                    ownUser = Profile.objects.select_for_update().get(user_id=sub.user_id)
                    ownNbrNotif = ownUser.nbrNotifs
                    ownUser.nbrNotifs = ownNbrNotif+1
                    ownUser.save()
                sub.save()

                #Create line comment and populate table
               # lineComment = LineComment.objects.create_lineComment(sub, review, line_n, comment)
               # lineComment.save()

            except BaseException, err:
                print '; '.join(err.__unicode__())
                return render_to_response("rating.html", {'form': form, 'nbrNot' : noti}, context_instance=RequestContext(request))
        return HttpResponseRedirect('/submission/' + s_id)
    else:
        submission = Submission.objects.get(id=s_id)
        code = submission.code
        user = User.objects.get(id = submission.user_id)
        form = RatingForm()
        return render_to_response('rating.html', {'form' : form, 'userCode' : code, 'user' : user.username, 'lang': submission.language, 'nbrNot' : noti}, context_instance=RequestContext(request))


def register(request):
    if request.method == 'POST':
        form = UserCreateForm(request.POST)
        if error_register(request) or not form.is_valid():
            return render_to_response('signup.html', form, context_instance=RequestContext(request, {'form': form, 'navlog' : True}))
        else:
            username = request.POST['username']
            email = request.POST['email']
            password = request.POST['password1']
            user = User.objects.create_user(username, email, password)
            user.is_active = False
            user.save()
            #TODO : Randomize confirmation code
            cRandom = random.random() * 711
            confirmation_code = ''.join("RAMCO-") + str(cRandom)
            p = Profile(user=user, confirmation_code=confirmation_code)
            p.save()
            send_registration_confirmation(user)
            messages.success(request, 'Thank you for your registration. Please check your mails to activate your account.')
            return HttpResponseRedirect('/login/')
    else:
        form = UserCreateForm()
        return render_to_response('signup.html', form, context_instance=RequestContext(request, {'form': form, 'navlog' : True}))


def send_registration_confirmation(user):
    p = user.get_profile()
    title = "RAMCO account confirmation"
    #TODO : redirect confirm on URLs
    content = "Hi, thank you for registering. Here is your activation link: " \
              "http://localhost:8000/confirm/" + str(p.confirmation_code) + "/" + user.username
    send_mail(title, content, 'ramco.confirm@gmail.com', [user.email], fail_silently=False)


def confirm(request, confirmation_code, username):
    try:
        user = User.objects.get(username=username)
        profile = user.get_profile()
        if profile.confirmation_code == confirmation_code and not user.is_active:
            user.is_active = True
            user.save()
            messages.success(request, 'Your account is now successfully active !')
            return HttpResponseRedirect('/login/')
        else:
            return render_to_response("failed.html", {'thing': "your e-mail confirmation"}, context_instance=RequestContext(request))
    except:
        return render_to_response("failed.html", {'thing': "your e-mail confirmation"}, context_instance=RequestContext(request))


def error_register(request):
    username = request.POST['username']
    password = request.POST['password1']
    email = request.POST['email']
    if username.replace(" ", "") == "" or password.replace(" ", "") == "":
        return True
    if len(username) > 15 or len(password) > 50:
        return True
    if not "@" in email:
        return True
    try:
        if User.objects.get(username=username):
            return True
    except:
        pass

@login_required(login_url='/login/')
def myReviews(request):
    noti = request.user.get_profile().nbrNotifs
    user = request.user
    submissions = Submission.objects.filter(user_id=user.id).order_by('id').reverse()[0:10]
    return render_to_response("myRevs.html", {'navrevreq' : True, 'submissions' : submissions, 'nbrNot' : noti})
    


@login_required(login_url='/login/')
def view_submission(request, s_id):
    try:
        sub = Submission.objects.get(id=s_id)
        sub.code.encode();
        user = request.user
        comments = Review.objects.filter(submission=sub).order_by('id').reverse()
        #line_comments = LineComment.objects.get(submission=sub)
        if sub is None:
            noti = request.user.get_profile().nbrNotifs
            return render_to_response("failed.html", {'thing': "the submission you are looking for does not exist", 'nbrNot' : noti}, context_instance=RequestContext(request))
        else:
            if sub.ownerNotif and user.id==sub.user_id:
                sub.ownerNotif = False
                sub.save()
                profile = Profile.objects.select_for_update().get(user_id=sub.user_id)
                pNbrNotif = profile.nbrNotifs
                profile.nbrNotifs = pNbrNotif-1
                profile.save()
            noti = request.user.get_profile().nbrNotifs
            #  'lineComments': line_comments
            return render_to_response("submView.html", {'sub': sub, 'comments': comments, 'MAX_RATING': MAX_RATING, 'nbrNot' : noti}, context_instance=RequestContext(request))
    except:
        noti = request.user.get_profile().nbrNotifs
        return render_to_response("failed.html", {'thing': "the submission you are looking for does not exist", 'nbrNot' : noti}, context_instance=RequestContext(request))
    
def changelog(request):
    return render_to_response('changelog.html')
